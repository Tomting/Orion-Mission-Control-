#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class iEstatetype:
  UPSERT = 0
  DELTMB = 1

  _VALUES_TO_NAMES = {
    0: "UPSERT",
    1: "DELTMB",
  }

  _NAMES_TO_VALUES = {
    "UPSERT": 0,
    "DELTMB": 1,
  }

class iEcolumntype:
  KEYTYPE___ = 0
  STRINGTYPE = 1
  LSTRNGTYPE = 2
  INTEGRTYPE = 3
  LINTGRTYPE = 4
  DOUBLETYPE = 5
  LDOUBLTYPE = 6
  BOOLN_TYPE = 7

  _VALUES_TO_NAMES = {
    0: "KEYTYPE___",
    1: "STRINGTYPE",
    2: "LSTRNGTYPE",
    3: "INTEGRTYPE",
    4: "LINTGRTYPE",
    5: "DOUBLETYPE",
    6: "LDOUBLTYPE",
    7: "BOOLN_TYPE",
  }

  _NAMES_TO_VALUES = {
    "KEYTYPE___": 0,
    "STRINGTYPE": 1,
    "LSTRNGTYPE": 2,
    "INTEGRTYPE": 3,
    "LINTGRTYPE": 4,
    "DOUBLETYPE": 5,
    "LDOUBLTYPE": 6,
    "BOOLN_TYPE": 7,
  }

class iEconditiontype:
  ECOND = 0
  GCOND = 1
  LCOND = 2
  GECOND = 3
  LECOND = 4

  _VALUES_TO_NAMES = {
    0: "ECOND",
    1: "GCOND",
    2: "LCOND",
    3: "GECOND",
    4: "LECOND",
  }

  _NAMES_TO_VALUES = {
    "ECOND": 0,
    "GCOND": 1,
    "LCOND": 2,
    "GECOND": 3,
    "LECOND": 4,
  }

class iEopcodetype:
  MUTATOR = 0
  REPAIR_ = 2

  _VALUES_TO_NAMES = {
    0: "MUTATOR",
    2: "REPAIR_",
  }

  _NAMES_TO_VALUES = {
    "MUTATOR": 0,
    "REPAIR_": 2,
  }

class iEquerytype:
  EXACTQUERY = 0
  RANGEQUERY = 1
  TOKENQUERY = 2
  TKALLQUERY = 3
  TKSLWQUERY = 4

  _VALUES_TO_NAMES = {
    0: "EXACTQUERY",
    1: "RANGEQUERY",
    2: "TOKENQUERY",
    3: "TKALLQUERY",
    4: "TKSLWQUERY",
  }

  _NAMES_TO_VALUES = {
    "EXACTQUERY": 0,
    "RANGEQUERY": 1,
    "TOKENQUERY": 2,
    "TKALLQUERY": 3,
    "TKSLWQUERY": 4,
  }

class iEordertype:
  ASC = 0
  DESC = 1

  _VALUES_TO_NAMES = {
    0: "ASC",
    1: "DESC",
  }

  _NAMES_TO_VALUES = {
    "ASC": 0,
    "DESC": 1,
  }

class iEstategossipnode:
  RUNNING = 0
  JOINING = 1
  LEAVING = 2
  STOPPED = 3
  LOADING = 4

  _VALUES_TO_NAMES = {
    0: "RUNNING",
    1: "JOINING",
    2: "LEAVING",
    3: "STOPPED",
    4: "LOADING",
  }

  _NAMES_TO_VALUES = {
    "RUNNING": 0,
    "JOINING": 1,
    "LEAVING": 2,
    "STOPPED": 3,
    "LOADING": 4,
  }

class iEreservedkeyword:
  STARTUP = 0
  SHUTDOWN = 1
  VERS = 2
  NETWORK = 3
  ADD = 4
  REMOVE = 5
  JOIN = 6
  LEAVE = 7
  TABLET = 8
  STORE = 9
  FORGET = 10
  LOAD = 11
  STATS = 12
  READ = 13
  WRITE = 14
  INFO = 15
  TOUCH = 16
  KILL = 17
  STOPTHRIFT = 18
  STARTTHRIFT = 19
  DISCONNECT = 20
  RESETLOCAL = 21
  STATSTHRIFT = 22
  ANTIENTROPHY = 23
  PULLALL = 24
  PPULLMATCH = 25
  PPULLREPAIR = 26
  TABLE = 27
  REBUILD = 28
  SPLIT = 30
  JOINFAST = 31
  STOPSEDA = 32
  STARTSEDA = 33
  ADDFAST = 34
  FREEZE = 35
  RELOAD = 36
  TOP = 37
  CLEAN = 38
  PURGE = 39
  REPAIR = 40
  TRUNCATE = 41
  SHRINK = 42
  SOFTSHRINK = 43
  COMPACTION = 44
  REMOVEFAST = 45
  LEAVEFAST = 46
  REBUILDPART = 47
  SIZE = 48
  CLONE = 49
  REBOUND = 50
  REJOIN = 51
  NORMAL = 100
  ABORT = 101

  _VALUES_TO_NAMES = {
    0: "STARTUP",
    1: "SHUTDOWN",
    2: "VERS",
    3: "NETWORK",
    4: "ADD",
    5: "REMOVE",
    6: "JOIN",
    7: "LEAVE",
    8: "TABLET",
    9: "STORE",
    10: "FORGET",
    11: "LOAD",
    12: "STATS",
    13: "READ",
    14: "WRITE",
    15: "INFO",
    16: "TOUCH",
    17: "KILL",
    18: "STOPTHRIFT",
    19: "STARTTHRIFT",
    20: "DISCONNECT",
    21: "RESETLOCAL",
    22: "STATSTHRIFT",
    23: "ANTIENTROPHY",
    24: "PULLALL",
    25: "PPULLMATCH",
    26: "PPULLREPAIR",
    27: "TABLE",
    28: "REBUILD",
    30: "SPLIT",
    31: "JOINFAST",
    32: "STOPSEDA",
    33: "STARTSEDA",
    34: "ADDFAST",
    35: "FREEZE",
    36: "RELOAD",
    37: "TOP",
    38: "CLEAN",
    39: "PURGE",
    40: "REPAIR",
    41: "TRUNCATE",
    42: "SHRINK",
    43: "SOFTSHRINK",
    44: "COMPACTION",
    45: "REMOVEFAST",
    46: "LEAVEFAST",
    47: "REBUILDPART",
    48: "SIZE",
    49: "CLONE",
    50: "REBOUND",
    51: "REJOIN",
    100: "NORMAL",
    101: "ABORT",
  }

  _NAMES_TO_VALUES = {
    "STARTUP": 0,
    "SHUTDOWN": 1,
    "VERS": 2,
    "NETWORK": 3,
    "ADD": 4,
    "REMOVE": 5,
    "JOIN": 6,
    "LEAVE": 7,
    "TABLET": 8,
    "STORE": 9,
    "FORGET": 10,
    "LOAD": 11,
    "STATS": 12,
    "READ": 13,
    "WRITE": 14,
    "INFO": 15,
    "TOUCH": 16,
    "KILL": 17,
    "STOPTHRIFT": 18,
    "STARTTHRIFT": 19,
    "DISCONNECT": 20,
    "RESETLOCAL": 21,
    "STATSTHRIFT": 22,
    "ANTIENTROPHY": 23,
    "PULLALL": 24,
    "PPULLMATCH": 25,
    "PPULLREPAIR": 26,
    "TABLE": 27,
    "REBUILD": 28,
    "SPLIT": 30,
    "JOINFAST": 31,
    "STOPSEDA": 32,
    "STARTSEDA": 33,
    "ADDFAST": 34,
    "FREEZE": 35,
    "RELOAD": 36,
    "TOP": 37,
    "CLEAN": 38,
    "PURGE": 39,
    "REPAIR": 40,
    "TRUNCATE": 41,
    "SHRINK": 42,
    "SOFTSHRINK": 43,
    "COMPACTION": 44,
    "REMOVEFAST": 45,
    "LEAVEFAST": 46,
    "REBUILDPART": 47,
    "SIZE": 48,
    "CLONE": 49,
    "REBOUND": 50,
    "REJOIN": 51,
    "NORMAL": 100,
    "ABORT": 101,
  }

class iEtablettype:
  MEMORYTABLETYPE = 0
  SSTABLETYPE = 1

  _VALUES_TO_NAMES = {
    0: "MEMORYTABLETYPE",
    1: "SSTABLETYPE",
  }

  _NAMES_TO_VALUES = {
    "MEMORYTABLETYPE": 0,
    "SSTABLETYPE": 1,
  }

class iEservicetype:
  STATEMENT = 0
  QUERY = 1
  OSQL = 2

  _VALUES_TO_NAMES = {
    0: "STATEMENT",
    1: "QUERY",
    2: "OSQL",
  }

  _NAMES_TO_VALUES = {
    "STATEMENT": 0,
    "QUERY": 1,
    "OSQL": 2,
  }

class iEbulkservicetype:
  BULKTHRIFT = 0
  BULKSTRING = 1
  SINGLETHRIFT = 2
  PING = 3

  _VALUES_TO_NAMES = {
    0: "BULKTHRIFT",
    1: "BULKSTRING",
    2: "SINGLETHRIFT",
    3: "PING",
  }

  _NAMES_TO_VALUES = {
    "BULKTHRIFT": 0,
    "BULKSTRING": 1,
    "SINGLETHRIFT": 2,
    "PING": 3,
  }


class ThrfLmtb:
  """
  Attributes:
   - sVnamespace
   - sVtable
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVnamespace', None, None, ), # 1
    (2, TType.STRING, 'sVtable', None, None, ), # 2
  )

  def __init__(self, sVnamespace=None, sVtable=None,):
    self.sVnamespace = sVnamespace
    self.sVtable = sVtable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVnamespace = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVtable = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfLmtb')
    if self.sVnamespace is not None:
      oprot.writeFieldBegin('sVnamespace', TType.STRING, 1)
      oprot.writeString(self.sVnamespace)
      oprot.writeFieldEnd()
    if self.sVtable is not None:
      oprot.writeFieldBegin('sVtable', TType.STRING, 2)
      oprot.writeString(self.sVtable)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVnamespace is None:
      raise TProtocol.TProtocolException(message='Required field sVnamespace is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfLkey:
  """
  Attributes:
   - sVmain
   - sVaccessgroup
   - sVqualifier
   - iVstate
   - iVtimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVmain', None, None, ), # 1
    (2, TType.STRING, 'sVaccessgroup', None, None, ), # 2
    (3, TType.STRING, 'sVqualifier', None, None, ), # 3
    (4, TType.I32, 'iVstate', None, None, ), # 4
    (5, TType.I64, 'iVtimestamp', None, None, ), # 5
  )

  def __init__(self, sVmain=None, sVaccessgroup=None, sVqualifier=None, iVstate=None, iVtimestamp=None,):
    self.sVmain = sVmain
    self.sVaccessgroup = sVaccessgroup
    self.sVqualifier = sVqualifier
    self.iVstate = iVstate
    self.iVtimestamp = iVtimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVmain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVaccessgroup = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sVqualifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iVstate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.iVtimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfLkey')
    if self.sVmain is not None:
      oprot.writeFieldBegin('sVmain', TType.STRING, 1)
      oprot.writeString(self.sVmain)
      oprot.writeFieldEnd()
    if self.sVaccessgroup is not None:
      oprot.writeFieldBegin('sVaccessgroup', TType.STRING, 2)
      oprot.writeString(self.sVaccessgroup)
      oprot.writeFieldEnd()
    if self.sVqualifier is not None:
      oprot.writeFieldBegin('sVqualifier', TType.STRING, 3)
      oprot.writeString(self.sVqualifier)
      oprot.writeFieldEnd()
    if self.iVstate is not None:
      oprot.writeFieldBegin('iVstate', TType.I32, 4)
      oprot.writeI32(self.iVstate)
      oprot.writeFieldEnd()
    if self.iVtimestamp is not None:
      oprot.writeFieldBegin('iVtimestamp', TType.I64, 5)
      oprot.writeI64(self.iVtimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVmain is None:
      raise TProtocol.TProtocolException(message='Required field sVmain is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2cv:
  """
  Attributes:
   - iVtype
   - sVvalue
   - sVlistvalue
   - iVvalue
   - iVlistvalue
   - dVvalue
   - dVlistvalue
   - bVvalue
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVtype', None, None, ), # 1
    (2, TType.STRING, 'sVvalue', None, None, ), # 2
    (3, TType.LIST, 'sVlistvalue', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'iVvalue', None, None, ), # 4
    (5, TType.LIST, 'iVlistvalue', (TType.I32,None), None, ), # 5
    (6, TType.DOUBLE, 'dVvalue', None, None, ), # 6
    (7, TType.LIST, 'dVlistvalue', (TType.DOUBLE,None), None, ), # 7
    (8, TType.BOOL, 'bVvalue', None, None, ), # 8
  )

  def __init__(self, iVtype=None, sVvalue=None, sVlistvalue=None, iVvalue=None, iVlistvalue=None, dVvalue=None, dVlistvalue=None, bVvalue=None,):
    self.iVtype = iVtype
    self.sVvalue = sVvalue
    self.sVlistvalue = sVlistvalue
    self.iVvalue = iVvalue
    self.iVlistvalue = iVlistvalue
    self.dVvalue = dVvalue
    self.dVlistvalue = dVlistvalue
    self.bVvalue = bVvalue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVtype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVvalue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.sVlistvalue = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.sVlistvalue.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iVvalue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.iVlistvalue = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.iVlistvalue.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.dVvalue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.dVlistvalue = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readDouble();
            self.dVlistvalue.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.bVvalue = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2cv')
    if self.iVtype is not None:
      oprot.writeFieldBegin('iVtype', TType.I32, 1)
      oprot.writeI32(self.iVtype)
      oprot.writeFieldEnd()
    if self.sVvalue is not None:
      oprot.writeFieldBegin('sVvalue', TType.STRING, 2)
      oprot.writeString(self.sVvalue)
      oprot.writeFieldEnd()
    if self.sVlistvalue is not None:
      oprot.writeFieldBegin('sVlistvalue', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.sVlistvalue))
      for iter18 in self.sVlistvalue:
        oprot.writeString(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.iVvalue is not None:
      oprot.writeFieldBegin('iVvalue', TType.I32, 4)
      oprot.writeI32(self.iVvalue)
      oprot.writeFieldEnd()
    if self.iVlistvalue is not None:
      oprot.writeFieldBegin('iVlistvalue', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.iVlistvalue))
      for iter19 in self.iVlistvalue:
        oprot.writeI32(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dVvalue is not None:
      oprot.writeFieldBegin('dVvalue', TType.DOUBLE, 6)
      oprot.writeDouble(self.dVvalue)
      oprot.writeFieldEnd()
    if self.dVlistvalue is not None:
      oprot.writeFieldBegin('dVlistvalue', TType.LIST, 7)
      oprot.writeListBegin(TType.DOUBLE, len(self.dVlistvalue))
      for iter20 in self.dVlistvalue:
        oprot.writeDouble(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bVvalue is not None:
      oprot.writeFieldBegin('bVvalue', TType.BOOL, 8)
      oprot.writeBool(self.bVvalue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVtype is None:
      raise TProtocol.TProtocolException(message='Required field iVtype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2cl:
  """
  Attributes:
   - sVcolumn
   - iVtype
   - cVvalue
   - iVconditiontype
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVcolumn', None, None, ), # 1
    (2, TType.I32, 'iVtype', None, None, ), # 2
    (3, TType.STRUCT, 'cVvalue', (ThrfL2cv, ThrfL2cv.thrift_spec), None, ), # 3
    (4, TType.I32, 'iVconditiontype', None, None, ), # 4
  )

  def __init__(self, sVcolumn=None, iVtype=None, cVvalue=None, iVconditiontype=None,):
    self.sVcolumn = sVcolumn
    self.iVtype = iVtype
    self.cVvalue = cVvalue
    self.iVconditiontype = iVconditiontype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVcolumn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iVtype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVvalue = ThrfL2cv()
          self.cVvalue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iVconditiontype = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2cl')
    if self.sVcolumn is not None:
      oprot.writeFieldBegin('sVcolumn', TType.STRING, 1)
      oprot.writeString(self.sVcolumn)
      oprot.writeFieldEnd()
    if self.iVtype is not None:
      oprot.writeFieldBegin('iVtype', TType.I32, 2)
      oprot.writeI32(self.iVtype)
      oprot.writeFieldEnd()
    if self.cVvalue is not None:
      oprot.writeFieldBegin('cVvalue', TType.STRUCT, 3)
      self.cVvalue.write(oprot)
      oprot.writeFieldEnd()
    if self.iVconditiontype is not None:
      oprot.writeFieldBegin('iVconditiontype', TType.I32, 4)
      oprot.writeI32(self.iVconditiontype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVcolumn is None:
      raise TProtocol.TProtocolException(message='Required field sVcolumn is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfLval:
  """
  Attributes:
   - sVopaquevalue
   - iVtimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVopaquevalue', None, None, ), # 1
    (2, TType.I64, 'iVtimestamp', None, None, ), # 2
  )

  def __init__(self, sVopaquevalue=None, iVtimestamp=None,):
    self.sVopaquevalue = sVopaquevalue
    self.iVtimestamp = iVtimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVopaquevalue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.iVtimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfLval')
    if self.sVopaquevalue is not None:
      oprot.writeFieldBegin('sVopaquevalue', TType.STRING, 1)
      oprot.writeString(self.sVopaquevalue)
      oprot.writeFieldEnd()
    if self.iVtimestamp is not None:
      oprot.writeFieldBegin('iVtimestamp', TType.I64, 2)
      oprot.writeI64(self.iVtimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVopaquevalue is None:
      raise TProtocol.TProtocolException(message='Required field sVopaquevalue is unset!')
    if self.iVtimestamp is None:
      raise TProtocol.TProtocolException(message='Required field iVtimestamp is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL1ks:
  """
  Attributes:
   - cVkey
   - bVresult
   - cVvalue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cVkey', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 1
    (2, TType.BOOL, 'bVresult', None, None, ), # 2
    (3, TType.STRUCT, 'cVvalue', (ThrfLval, ThrfLval.thrift_spec), None, ), # 3
  )

  def __init__(self, cVkey=None, bVresult=None, cVvalue=None,):
    self.cVkey = cVkey
    self.bVresult = bVresult
    self.cVvalue = cVvalue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cVkey = ThrfLkey()
          self.cVkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.bVresult = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVvalue = ThrfLval()
          self.cVvalue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL1ks')
    if self.cVkey is not None:
      oprot.writeFieldBegin('cVkey', TType.STRUCT, 1)
      self.cVkey.write(oprot)
      oprot.writeFieldEnd()
    if self.bVresult is not None:
      oprot.writeFieldBegin('bVresult', TType.BOOL, 2)
      oprot.writeBool(self.bVresult)
      oprot.writeFieldEnd()
    if self.cVvalue is not None:
      oprot.writeFieldBegin('cVvalue', TType.STRUCT, 3)
      self.cVvalue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cVkey is None:
      raise TProtocol.TProtocolException(message='Required field cVkey is unset!')
    if self.bVresult is None:
      raise TProtocol.TProtocolException(message='Required field bVresult is unset!')
    if self.cVvalue is None:
      raise TProtocol.TProtocolException(message='Required field cVvalue is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfLstm:
  """
  Attributes:
   - cVmutable
   - cVkey
   - cVvalue
   - iVopcode
   - sVcallback
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cVkey', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cVvalue', (ThrfLval, ThrfLval.thrift_spec), None, ), # 3
    (4, TType.I32, 'iVopcode', None,     0, ), # 4
    (5, TType.STRING, 'sVcallback', None, None, ), # 5
  )

  def __init__(self, cVmutable=None, cVkey=None, cVvalue=None, iVopcode=thrift_spec[4][4], sVcallback=None,):
    self.cVmutable = cVmutable
    self.cVkey = cVkey
    self.cVvalue = cVvalue
    self.iVopcode = iVopcode
    self.sVcallback = sVcallback

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cVkey = ThrfLkey()
          self.cVkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVvalue = ThrfLval()
          self.cVvalue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iVopcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sVcallback = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfLstm')
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 1)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.cVkey is not None:
      oprot.writeFieldBegin('cVkey', TType.STRUCT, 2)
      self.cVkey.write(oprot)
      oprot.writeFieldEnd()
    if self.cVvalue is not None:
      oprot.writeFieldBegin('cVvalue', TType.STRUCT, 3)
      self.cVvalue.write(oprot)
      oprot.writeFieldEnd()
    if self.iVopcode is not None:
      oprot.writeFieldBegin('iVopcode', TType.I32, 4)
      oprot.writeI32(self.iVopcode)
      oprot.writeFieldEnd()
    if self.sVcallback is not None:
      oprot.writeFieldBegin('sVcallback', TType.STRING, 5)
      oprot.writeString(self.sVcallback)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cVmutable is None:
      raise TProtocol.TProtocolException(message='Required field cVmutable is unset!')
    if self.cVkey is None:
      raise TProtocol.TProtocolException(message='Required field cVkey is unset!')
    if self.cVvalue is None:
      raise TProtocol.TProtocolException(message='Required field cVvalue is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2st:
  """
  Attributes:
   - cVmutable
   - cVkey
   - cVcolumns
   - iVopcode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cVkey', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 2
    (3, TType.LIST, 'cVcolumns', (TType.STRUCT,(ThrfL2cl, ThrfL2cl.thrift_spec)), None, ), # 3
    (4, TType.I32, 'iVopcode', None,     0, ), # 4
  )

  def __init__(self, cVmutable=None, cVkey=None, cVcolumns=None, iVopcode=thrift_spec[4][4],):
    self.cVmutable = cVmutable
    self.cVkey = cVkey
    self.cVcolumns = cVcolumns
    self.iVopcode = iVopcode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cVkey = ThrfLkey()
          self.cVkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cVcolumns = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = ThrfL2cl()
            _elem26.read(iprot)
            self.cVcolumns.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iVopcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2st')
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 1)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.cVkey is not None:
      oprot.writeFieldBegin('cVkey', TType.STRUCT, 2)
      self.cVkey.write(oprot)
      oprot.writeFieldEnd()
    if self.cVcolumns is not None:
      oprot.writeFieldBegin('cVcolumns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.cVcolumns))
      for iter27 in self.cVcolumns:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.iVopcode is not None:
      oprot.writeFieldBegin('iVopcode', TType.I32, 4)
      oprot.writeI32(self.iVopcode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cVmutable is None:
      raise TProtocol.TProtocolException(message='Required field cVmutable is unset!')
    if self.cVkey is None:
      raise TProtocol.TProtocolException(message='Required field cVkey is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2ag:
  """
  Attributes:
   - sVname
   - sVcolumns
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVname', None, None, ), # 1
    (2, TType.LIST, 'sVcolumns', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, sVname=None, sVcolumns=None,):
    self.sVname = sVname
    self.sVcolumns = sVcolumns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sVcolumns = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.sVcolumns.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2ag')
    if self.sVname is not None:
      oprot.writeFieldBegin('sVname', TType.STRING, 1)
      oprot.writeString(self.sVname)
      oprot.writeFieldEnd()
    if self.sVcolumns is not None:
      oprot.writeFieldBegin('sVcolumns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.sVcolumns))
      for iter34 in self.sVcolumns:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVname is None:
      raise TProtocol.TProtocolException(message='Required field sVname is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2ct:
  """
  Attributes:
   - cVmutable
   - cVcolumns
   - cVaccessgroups
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 1
    (2, TType.LIST, 'cVcolumns', (TType.STRUCT,(ThrfL2cl, ThrfL2cl.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'cVaccessgroups', (TType.STRUCT,(ThrfL2ag, ThrfL2ag.thrift_spec)), None, ), # 3
  )

  def __init__(self, cVmutable=None, cVcolumns=None, cVaccessgroups=None,):
    self.cVmutable = cVmutable
    self.cVcolumns = cVcolumns
    self.cVaccessgroups = cVaccessgroups

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVcolumns = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = ThrfL2cl()
            _elem40.read(iprot)
            self.cVcolumns.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cVaccessgroups = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = ThrfL2ag()
            _elem46.read(iprot)
            self.cVaccessgroups.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2ct')
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 1)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.cVcolumns is not None:
      oprot.writeFieldBegin('cVcolumns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVcolumns))
      for iter47 in self.cVcolumns:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVaccessgroups is not None:
      oprot.writeFieldBegin('cVaccessgroups', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.cVaccessgroups))
      for iter48 in self.cVaccessgroups:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cVmutable is None:
      raise TProtocol.TProtocolException(message='Required field cVmutable is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2ks:
  """
  Attributes:
   - cVkey
   - cVcolumns
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cVkey', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 1
    (2, TType.LIST, 'cVcolumns', (TType.STRUCT,(ThrfL2cl, ThrfL2cl.thrift_spec)), None, ), # 2
  )

  def __init__(self, cVkey=None, cVcolumns=None,):
    self.cVkey = cVkey
    self.cVcolumns = cVcolumns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cVkey = ThrfLkey()
          self.cVkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVcolumns = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = ThrfL2cl()
            _elem54.read(iprot)
            self.cVcolumns.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2ks')
    if self.cVkey is not None:
      oprot.writeFieldBegin('cVkey', TType.STRUCT, 1)
      self.cVkey.write(oprot)
      oprot.writeFieldEnd()
    if self.cVcolumns is not None:
      oprot.writeFieldBegin('cVcolumns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVcolumns))
      for iter55 in self.cVcolumns:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cVkey is None:
      raise TProtocol.TProtocolException(message='Required field cVkey is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2or:
  """
  Attributes:
   - sVcolumn
   - iVordertype
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVcolumn', None, None, ), # 1
    (2, TType.I32, 'iVordertype', None, None, ), # 2
  )

  def __init__(self, sVcolumn=None, iVordertype=None,):
    self.sVcolumn = sVcolumn
    self.iVordertype = iVordertype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVcolumn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iVordertype = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2or')
    if self.sVcolumn is not None:
      oprot.writeFieldBegin('sVcolumn', TType.STRING, 1)
      oprot.writeString(self.sVcolumn)
      oprot.writeFieldEnd()
    if self.iVordertype is not None:
      oprot.writeFieldBegin('iVordertype', TType.I32, 2)
      oprot.writeI32(self.iVordertype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVcolumn is None:
      raise TProtocol.TProtocolException(message='Required field sVcolumn is unset!')
    if self.iVordertype is None:
      raise TProtocol.TProtocolException(message='Required field iVordertype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2wh:
  """
  Attributes:
   - cVcondition
   - cVorderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cVcondition', (TType.STRUCT,(ThrfL2cl, ThrfL2cl.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'cVorderby', (TType.STRUCT,(ThrfL2or, ThrfL2or.thrift_spec)), None, ), # 2
  )

  def __init__(self, cVcondition=None, cVorderby=None,):
    self.cVcondition = cVcondition
    self.cVorderby = cVorderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cVcondition = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = ThrfL2cl()
            _elem61.read(iprot)
            self.cVcondition.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVorderby = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = ThrfL2or()
            _elem67.read(iprot)
            self.cVorderby.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2wh')
    if self.cVcondition is not None:
      oprot.writeFieldBegin('cVcondition', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cVcondition))
      for iter68 in self.cVcondition:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVorderby is not None:
      oprot.writeFieldBegin('cVorderby', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVorderby))
      for iter69 in self.cVorderby:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2qr:
  """
  Attributes:
   - cVselect
   - cVmutable
   - iVquery
   - cVkey_start
   - cVkey_end
   - cVwhere
   - iVcount
   - bVonlysecondary
   - bVdisableteleport
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cVselect', (TType.STRUCT,(ThrfL2cl, ThrfL2cl.thrift_spec)), None, ), # 1
    (2, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 2
    (3, TType.I32, 'iVquery', None, None, ), # 3
    (4, TType.STRUCT, 'cVkey_start', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'cVkey_end', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'cVwhere', (ThrfL2wh, ThrfL2wh.thrift_spec), None, ), # 6
    (7, TType.I32, 'iVcount', None, 100, ), # 7
    (8, TType.BOOL, 'bVonlysecondary', None, False, ), # 8
    (9, TType.BOOL, 'bVdisableteleport', None, False, ), # 9
  )

  def __init__(self, cVselect=None, cVmutable=None, iVquery=None, cVkey_start=None, cVkey_end=None, cVwhere=None, iVcount=thrift_spec[7][4], bVonlysecondary=thrift_spec[8][4], bVdisableteleport=thrift_spec[9][4],):
    self.cVselect = cVselect
    self.cVmutable = cVmutable
    self.iVquery = iVquery
    self.cVkey_start = cVkey_start
    self.cVkey_end = cVkey_end
    self.cVwhere = cVwhere
    self.iVcount = iVcount
    self.bVonlysecondary = bVonlysecondary
    self.bVdisableteleport = bVdisableteleport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cVselect = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = ThrfL2cl()
            _elem75.read(iprot)
            self.cVselect.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.iVquery = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.cVkey_start = ThrfLkey()
          self.cVkey_start.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.cVkey_end = ThrfLkey()
          self.cVkey_end.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.cVwhere = ThrfL2wh()
          self.cVwhere.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.iVcount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.bVonlysecondary = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.bVdisableteleport = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2qr')
    if self.cVselect is not None:
      oprot.writeFieldBegin('cVselect', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cVselect))
      for iter76 in self.cVselect:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 2)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.iVquery is not None:
      oprot.writeFieldBegin('iVquery', TType.I32, 3)
      oprot.writeI32(self.iVquery)
      oprot.writeFieldEnd()
    if self.cVkey_start is not None:
      oprot.writeFieldBegin('cVkey_start', TType.STRUCT, 4)
      self.cVkey_start.write(oprot)
      oprot.writeFieldEnd()
    if self.cVkey_end is not None:
      oprot.writeFieldBegin('cVkey_end', TType.STRUCT, 5)
      self.cVkey_end.write(oprot)
      oprot.writeFieldEnd()
    if self.cVwhere is not None:
      oprot.writeFieldBegin('cVwhere', TType.STRUCT, 6)
      self.cVwhere.write(oprot)
      oprot.writeFieldEnd()
    if self.iVcount is not None:
      oprot.writeFieldBegin('iVcount', TType.I32, 7)
      oprot.writeI32(self.iVcount)
      oprot.writeFieldEnd()
    if self.bVonlysecondary is not None:
      oprot.writeFieldBegin('bVonlysecondary', TType.BOOL, 8)
      oprot.writeBool(self.bVonlysecondary)
      oprot.writeFieldEnd()
    if self.bVdisableteleport is not None:
      oprot.writeFieldBegin('bVdisableteleport', TType.BOOL, 9)
      oprot.writeBool(self.bVdisableteleport)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cVmutable is None:
      raise TProtocol.TProtocolException(message='Required field cVmutable is unset!')
    if self.bVonlysecondary is None:
      raise TProtocol.TProtocolException(message='Required field bVonlysecondary is unset!')
    if self.bVdisableteleport is None:
      raise TProtocol.TProtocolException(message='Required field bVdisableteleport is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2os:
  """
  Attributes:
   - sVnamespace
   - sVosqlstring
   - cVinputbindings
   - bVonlysecondary
   - bVdisableteleport
   - iVtimestamp
   - bVfulltablescan
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVnamespace', None, None, ), # 1
    (2, TType.STRING, 'sVosqlstring', None, None, ), # 2
    (3, TType.LIST, 'cVinputbindings', (TType.STRUCT,(ThrfL2cv, ThrfL2cv.thrift_spec)), None, ), # 3
    (4, TType.BOOL, 'bVonlysecondary', None, False, ), # 4
    (5, TType.BOOL, 'bVdisableteleport', None, False, ), # 5
    (6, TType.I64, 'iVtimestamp', None, None, ), # 6
    (7, TType.BOOL, 'bVfulltablescan', None, False, ), # 7
  )

  def __init__(self, sVnamespace=None, sVosqlstring=None, cVinputbindings=None, bVonlysecondary=thrift_spec[4][4], bVdisableteleport=thrift_spec[5][4], iVtimestamp=None, bVfulltablescan=thrift_spec[7][4],):
    self.sVnamespace = sVnamespace
    self.sVosqlstring = sVosqlstring
    self.cVinputbindings = cVinputbindings
    self.bVonlysecondary = bVonlysecondary
    self.bVdisableteleport = bVdisableteleport
    self.iVtimestamp = iVtimestamp
    self.bVfulltablescan = bVfulltablescan

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVnamespace = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVosqlstring = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cVinputbindings = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = ThrfL2cv()
            _elem82.read(iprot)
            self.cVinputbindings.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.bVonlysecondary = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.bVdisableteleport = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.iVtimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.bVfulltablescan = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2os')
    if self.sVnamespace is not None:
      oprot.writeFieldBegin('sVnamespace', TType.STRING, 1)
      oprot.writeString(self.sVnamespace)
      oprot.writeFieldEnd()
    if self.sVosqlstring is not None:
      oprot.writeFieldBegin('sVosqlstring', TType.STRING, 2)
      oprot.writeString(self.sVosqlstring)
      oprot.writeFieldEnd()
    if self.cVinputbindings is not None:
      oprot.writeFieldBegin('cVinputbindings', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.cVinputbindings))
      for iter83 in self.cVinputbindings:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bVonlysecondary is not None:
      oprot.writeFieldBegin('bVonlysecondary', TType.BOOL, 4)
      oprot.writeBool(self.bVonlysecondary)
      oprot.writeFieldEnd()
    if self.bVdisableteleport is not None:
      oprot.writeFieldBegin('bVdisableteleport', TType.BOOL, 5)
      oprot.writeBool(self.bVdisableteleport)
      oprot.writeFieldEnd()
    if self.iVtimestamp is not None:
      oprot.writeFieldBegin('iVtimestamp', TType.I64, 6)
      oprot.writeI64(self.iVtimestamp)
      oprot.writeFieldEnd()
    if self.bVfulltablescan is not None:
      oprot.writeFieldBegin('bVfulltablescan', TType.BOOL, 7)
      oprot.writeBool(self.bVfulltablescan)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVnamespace is None:
      raise TProtocol.TProtocolException(message='Required field sVnamespace is unset!')
    if self.sVosqlstring is None:
      raise TProtocol.TProtocolException(message='Required field sVosqlstring is unset!')
    if self.bVonlysecondary is None:
      raise TProtocol.TProtocolException(message='Required field bVonlysecondary is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfGoel:
  """
  Attributes:
   - sVtoken
   - sVnodeid
   - dVphiaccrual
   - sVaddress
   - iVport
   - sVdatacenterid
   - iVstate
   - iVtimestamp
   - iVsize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVtoken', None, None, ), # 1
    (2, TType.STRING, 'sVnodeid', None, None, ), # 2
    (3, TType.DOUBLE, 'dVphiaccrual', None, None, ), # 3
    (4, TType.STRING, 'sVaddress', None, None, ), # 4
    (5, TType.I32, 'iVport', None, None, ), # 5
    (6, TType.STRING, 'sVdatacenterid', None, None, ), # 6
    (7, TType.I32, 'iVstate', None, None, ), # 7
    (8, TType.I64, 'iVtimestamp', None, None, ), # 8
    (9, TType.I64, 'iVsize', None, None, ), # 9
  )

  def __init__(self, sVtoken=None, sVnodeid=None, dVphiaccrual=None, sVaddress=None, iVport=None, sVdatacenterid=None, iVstate=None, iVtimestamp=None, iVsize=None,):
    self.sVtoken = sVtoken
    self.sVnodeid = sVnodeid
    self.dVphiaccrual = dVphiaccrual
    self.sVaddress = sVaddress
    self.iVport = iVport
    self.sVdatacenterid = sVdatacenterid
    self.iVstate = iVstate
    self.iVtimestamp = iVtimestamp
    self.iVsize = iVsize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVtoken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVnodeid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.dVphiaccrual = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sVaddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.iVport = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sVdatacenterid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.iVstate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.iVtimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.iVsize = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfGoel')
    if self.sVtoken is not None:
      oprot.writeFieldBegin('sVtoken', TType.STRING, 1)
      oprot.writeString(self.sVtoken)
      oprot.writeFieldEnd()
    if self.sVnodeid is not None:
      oprot.writeFieldBegin('sVnodeid', TType.STRING, 2)
      oprot.writeString(self.sVnodeid)
      oprot.writeFieldEnd()
    if self.dVphiaccrual is not None:
      oprot.writeFieldBegin('dVphiaccrual', TType.DOUBLE, 3)
      oprot.writeDouble(self.dVphiaccrual)
      oprot.writeFieldEnd()
    if self.sVaddress is not None:
      oprot.writeFieldBegin('sVaddress', TType.STRING, 4)
      oprot.writeString(self.sVaddress)
      oprot.writeFieldEnd()
    if self.iVport is not None:
      oprot.writeFieldBegin('iVport', TType.I32, 5)
      oprot.writeI32(self.iVport)
      oprot.writeFieldEnd()
    if self.sVdatacenterid is not None:
      oprot.writeFieldBegin('sVdatacenterid', TType.STRING, 6)
      oprot.writeString(self.sVdatacenterid)
      oprot.writeFieldEnd()
    if self.iVstate is not None:
      oprot.writeFieldBegin('iVstate', TType.I32, 7)
      oprot.writeI32(self.iVstate)
      oprot.writeFieldEnd()
    if self.iVtimestamp is not None:
      oprot.writeFieldBegin('iVtimestamp', TType.I64, 8)
      oprot.writeI64(self.iVtimestamp)
      oprot.writeFieldEnd()
    if self.iVsize is not None:
      oprot.writeFieldBegin('iVsize', TType.I64, 9)
      oprot.writeI64(self.iVsize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVtoken is None:
      raise TProtocol.TProtocolException(message='Required field sVtoken is unset!')
    if self.sVnodeid is None:
      raise TProtocol.TProtocolException(message='Required field sVnodeid is unset!')
    if self.dVphiaccrual is None:
      raise TProtocol.TProtocolException(message='Required field dVphiaccrual is unset!')
    if self.sVdatacenterid is None:
      raise TProtocol.TProtocolException(message='Required field sVdatacenterid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfGoss:
  """
  Attributes:
   - cVgossipelement
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cVgossipelement', (TType.STRUCT,(ThrfGoel, ThrfGoel.thrift_spec)), None, ), # 1
  )

  def __init__(self, cVgossipelement=None,):
    self.cVgossipelement = cVgossipelement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cVgossipelement = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = ThrfGoel()
            _elem89.read(iprot)
            self.cVgossipelement.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfGoss')
    if self.cVgossipelement is not None:
      oprot.writeFieldBegin('cVgossipelement', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cVgossipelement))
      for iter90 in self.cVgossipelement:
        iter90.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfPtel:
  """
  Attributes:
   - sVnodeid
   - sVbound
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVnodeid', None, None, ), # 1
    (2, TType.STRING, 'sVbound', None, None, ), # 2
  )

  def __init__(self, sVnodeid=None, sVbound=None,):
    self.sVnodeid = sVnodeid
    self.sVbound = sVbound

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVnodeid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVbound = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfPtel')
    if self.sVnodeid is not None:
      oprot.writeFieldBegin('sVnodeid', TType.STRING, 1)
      oprot.writeString(self.sVnodeid)
      oprot.writeFieldEnd()
    if self.sVbound is not None:
      oprot.writeFieldBegin('sVbound', TType.STRING, 2)
      oprot.writeString(self.sVbound)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVnodeid is None:
      raise TProtocol.TProtocolException(message='Required field sVnodeid is unset!')
    if self.sVbound is None:
      raise TProtocol.TProtocolException(message='Required field sVbound is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfTlel:
  """
  Attributes:
   - iVtablettype
   - sVname
   - bVvalid
   - bVneedcompaction
   - bVvalidasmemorytable
   - iVcompactionlevel
   - sVmemorytable
   - iVres
   - iVmapped
   - iVsize
   - iVcount
   - sVredotimestamp
   - iVsstabletype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVtablettype', None, None, ), # 1
    (2, TType.STRING, 'sVname', None, None, ), # 2
    (3, TType.BOOL, 'bVvalid', None, None, ), # 3
    (4, TType.BOOL, 'bVneedcompaction', None, None, ), # 4
    (5, TType.BOOL, 'bVvalidasmemorytable', None, None, ), # 5
    (6, TType.I32, 'iVcompactionlevel', None, None, ), # 6
    (7, TType.STRING, 'sVmemorytable', None, None, ), # 7
    (8, TType.I64, 'iVres', None, None, ), # 8
    (9, TType.I64, 'iVmapped', None, None, ), # 9
    (10, TType.I64, 'iVsize', None, None, ), # 10
    (11, TType.I64, 'iVcount', None, None, ), # 11
    (12, TType.STRING, 'sVredotimestamp', None, None, ), # 12
    (13, TType.I32, 'iVsstabletype', None, None, ), # 13
  )

  def __init__(self, iVtablettype=None, sVname=None, bVvalid=None, bVneedcompaction=None, bVvalidasmemorytable=None, iVcompactionlevel=None, sVmemorytable=None, iVres=None, iVmapped=None, iVsize=None, iVcount=None, sVredotimestamp=None, iVsstabletype=None,):
    self.iVtablettype = iVtablettype
    self.sVname = sVname
    self.bVvalid = bVvalid
    self.bVneedcompaction = bVneedcompaction
    self.bVvalidasmemorytable = bVvalidasmemorytable
    self.iVcompactionlevel = iVcompactionlevel
    self.sVmemorytable = sVmemorytable
    self.iVres = iVres
    self.iVmapped = iVmapped
    self.iVsize = iVsize
    self.iVcount = iVcount
    self.sVredotimestamp = sVredotimestamp
    self.iVsstabletype = iVsstabletype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVtablettype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.bVvalid = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.bVneedcompaction = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.bVvalidasmemorytable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.iVcompactionlevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.sVmemorytable = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.iVres = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.iVmapped = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.iVsize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.iVcount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.sVredotimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.iVsstabletype = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfTlel')
    if self.iVtablettype is not None:
      oprot.writeFieldBegin('iVtablettype', TType.I32, 1)
      oprot.writeI32(self.iVtablettype)
      oprot.writeFieldEnd()
    if self.sVname is not None:
      oprot.writeFieldBegin('sVname', TType.STRING, 2)
      oprot.writeString(self.sVname)
      oprot.writeFieldEnd()
    if self.bVvalid is not None:
      oprot.writeFieldBegin('bVvalid', TType.BOOL, 3)
      oprot.writeBool(self.bVvalid)
      oprot.writeFieldEnd()
    if self.bVneedcompaction is not None:
      oprot.writeFieldBegin('bVneedcompaction', TType.BOOL, 4)
      oprot.writeBool(self.bVneedcompaction)
      oprot.writeFieldEnd()
    if self.bVvalidasmemorytable is not None:
      oprot.writeFieldBegin('bVvalidasmemorytable', TType.BOOL, 5)
      oprot.writeBool(self.bVvalidasmemorytable)
      oprot.writeFieldEnd()
    if self.iVcompactionlevel is not None:
      oprot.writeFieldBegin('iVcompactionlevel', TType.I32, 6)
      oprot.writeI32(self.iVcompactionlevel)
      oprot.writeFieldEnd()
    if self.sVmemorytable is not None:
      oprot.writeFieldBegin('sVmemorytable', TType.STRING, 7)
      oprot.writeString(self.sVmemorytable)
      oprot.writeFieldEnd()
    if self.iVres is not None:
      oprot.writeFieldBegin('iVres', TType.I64, 8)
      oprot.writeI64(self.iVres)
      oprot.writeFieldEnd()
    if self.iVmapped is not None:
      oprot.writeFieldBegin('iVmapped', TType.I64, 9)
      oprot.writeI64(self.iVmapped)
      oprot.writeFieldEnd()
    if self.iVsize is not None:
      oprot.writeFieldBegin('iVsize', TType.I64, 10)
      oprot.writeI64(self.iVsize)
      oprot.writeFieldEnd()
    if self.iVcount is not None:
      oprot.writeFieldBegin('iVcount', TType.I64, 11)
      oprot.writeI64(self.iVcount)
      oprot.writeFieldEnd()
    if self.sVredotimestamp is not None:
      oprot.writeFieldBegin('sVredotimestamp', TType.STRING, 12)
      oprot.writeString(self.sVredotimestamp)
      oprot.writeFieldEnd()
    if self.iVsstabletype is not None:
      oprot.writeFieldBegin('iVsstabletype', TType.I32, 13)
      oprot.writeI32(self.iVsstabletype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVtablettype is None:
      raise TProtocol.TProtocolException(message='Required field iVtablettype is unset!')
    if self.sVname is None:
      raise TProtocol.TProtocolException(message='Required field sVname is unset!')
    if self.bVvalid is None:
      raise TProtocol.TProtocolException(message='Required field bVvalid is unset!')
    if self.bVneedcompaction is None:
      raise TProtocol.TProtocolException(message='Required field bVneedcompaction is unset!')
    if self.bVvalidasmemorytable is None:
      raise TProtocol.TProtocolException(message='Required field bVvalidasmemorytable is unset!')
    if self.iVcompactionlevel is None:
      raise TProtocol.TProtocolException(message='Required field iVcompactionlevel is unset!')
    if self.sVmemorytable is None:
      raise TProtocol.TProtocolException(message='Required field sVmemorytable is unset!')
    if self.iVres is None:
      raise TProtocol.TProtocolException(message='Required field iVres is unset!')
    if self.iVmapped is None:
      raise TProtocol.TProtocolException(message='Required field iVmapped is unset!')
    if self.iVsize is None:
      raise TProtocol.TProtocolException(message='Required field iVsize is unset!')
    if self.iVcount is None:
      raise TProtocol.TProtocolException(message='Required field iVcount is unset!')
    if self.sVredotimestamp is None:
      raise TProtocol.TProtocolException(message='Required field sVredotimestamp is unset!')
    if self.iVsstabletype is None:
      raise TProtocol.TProtocolException(message='Required field iVsstabletype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfTabl:
  """
  Attributes:
   - sVxml
   - cVpartitionedelements
   - cVpartitionedindexelements
   - cVtabletelement
   - cVindextabletelement
   - sVjoincustompartition
   - sVjoincustompartitionindex
   - sVpartitiontype
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVxml', None, None, ), # 1
    (2, TType.LIST, 'cVpartitionedelements', (TType.STRUCT,(ThrfPtel, ThrfPtel.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'cVpartitionedindexelements', (TType.STRUCT,(ThrfPtel, ThrfPtel.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'cVtabletelement', (TType.STRUCT,(ThrfTlel, ThrfTlel.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'cVindextabletelement', (TType.STRUCT,(ThrfTlel, ThrfTlel.thrift_spec)), None, ), # 5
    (6, TType.STRING, 'sVjoincustompartition', None, None, ), # 6
    (7, TType.STRING, 'sVjoincustompartitionindex', None, None, ), # 7
    (8, TType.STRING, 'sVpartitiontype', None, None, ), # 8
  )

  def __init__(self, sVxml=None, cVpartitionedelements=None, cVpartitionedindexelements=None, cVtabletelement=None, cVindextabletelement=None, sVjoincustompartition=None, sVjoincustompartitionindex=None, sVpartitiontype=None,):
    self.sVxml = sVxml
    self.cVpartitionedelements = cVpartitionedelements
    self.cVpartitionedindexelements = cVpartitionedindexelements
    self.cVtabletelement = cVtabletelement
    self.cVindextabletelement = cVindextabletelement
    self.sVjoincustompartition = sVjoincustompartition
    self.sVjoincustompartitionindex = sVjoincustompartitionindex
    self.sVpartitiontype = sVpartitiontype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVxml = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVpartitionedelements = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = ThrfPtel()
            _elem96.read(iprot)
            self.cVpartitionedelements.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cVpartitionedindexelements = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = ThrfPtel()
            _elem102.read(iprot)
            self.cVpartitionedindexelements.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.cVtabletelement = []
          (_etype106, _size103) = iprot.readListBegin()
          for _i107 in xrange(_size103):
            _elem108 = ThrfTlel()
            _elem108.read(iprot)
            self.cVtabletelement.append(_elem108)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.cVindextabletelement = []
          (_etype112, _size109) = iprot.readListBegin()
          for _i113 in xrange(_size109):
            _elem114 = ThrfTlel()
            _elem114.read(iprot)
            self.cVindextabletelement.append(_elem114)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sVjoincustompartition = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.sVjoincustompartitionindex = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.sVpartitiontype = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfTabl')
    if self.sVxml is not None:
      oprot.writeFieldBegin('sVxml', TType.STRING, 1)
      oprot.writeString(self.sVxml)
      oprot.writeFieldEnd()
    if self.cVpartitionedelements is not None:
      oprot.writeFieldBegin('cVpartitionedelements', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVpartitionedelements))
      for iter115 in self.cVpartitionedelements:
        iter115.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVpartitionedindexelements is not None:
      oprot.writeFieldBegin('cVpartitionedindexelements', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.cVpartitionedindexelements))
      for iter116 in self.cVpartitionedindexelements:
        iter116.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVtabletelement is not None:
      oprot.writeFieldBegin('cVtabletelement', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.cVtabletelement))
      for iter117 in self.cVtabletelement:
        iter117.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVindextabletelement is not None:
      oprot.writeFieldBegin('cVindextabletelement', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.cVindextabletelement))
      for iter118 in self.cVindextabletelement:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sVjoincustompartition is not None:
      oprot.writeFieldBegin('sVjoincustompartition', TType.STRING, 6)
      oprot.writeString(self.sVjoincustompartition)
      oprot.writeFieldEnd()
    if self.sVjoincustompartitionindex is not None:
      oprot.writeFieldBegin('sVjoincustompartitionindex', TType.STRING, 7)
      oprot.writeString(self.sVjoincustompartitionindex)
      oprot.writeFieldEnd()
    if self.sVpartitiontype is not None:
      oprot.writeFieldBegin('sVpartitiontype', TType.STRING, 8)
      oprot.writeString(self.sVpartitiontype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVxml is None:
      raise TProtocol.TProtocolException(message='Required field sVxml is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfStel:
  """
  Attributes:
   - iVcount
   - iVmeandelay
   - iVworstdelay
   - iVsize
   - iVelapsed
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'iVcount', None, None, ), # 1
    (2, TType.I32, 'iVmeandelay', None, None, ), # 2
    (3, TType.I32, 'iVworstdelay', None, None, ), # 3
    (4, TType.I64, 'iVsize', None, None, ), # 4
    (5, TType.I64, 'iVelapsed', None, None, ), # 5
  )

  def __init__(self, iVcount=None, iVmeandelay=None, iVworstdelay=None, iVsize=None, iVelapsed=None,):
    self.iVcount = iVcount
    self.iVmeandelay = iVmeandelay
    self.iVworstdelay = iVworstdelay
    self.iVsize = iVsize
    self.iVelapsed = iVelapsed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.iVcount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iVmeandelay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.iVworstdelay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.iVsize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.iVelapsed = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfStel')
    if self.iVcount is not None:
      oprot.writeFieldBegin('iVcount', TType.I64, 1)
      oprot.writeI64(self.iVcount)
      oprot.writeFieldEnd()
    if self.iVmeandelay is not None:
      oprot.writeFieldBegin('iVmeandelay', TType.I32, 2)
      oprot.writeI32(self.iVmeandelay)
      oprot.writeFieldEnd()
    if self.iVworstdelay is not None:
      oprot.writeFieldBegin('iVworstdelay', TType.I32, 3)
      oprot.writeI32(self.iVworstdelay)
      oprot.writeFieldEnd()
    if self.iVsize is not None:
      oprot.writeFieldBegin('iVsize', TType.I64, 4)
      oprot.writeI64(self.iVsize)
      oprot.writeFieldEnd()
    if self.iVelapsed is not None:
      oprot.writeFieldBegin('iVelapsed', TType.I64, 5)
      oprot.writeI64(self.iVelapsed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVcount is None:
      raise TProtocol.TProtocolException(message='Required field iVcount is unset!')
    if self.iVmeandelay is None:
      raise TProtocol.TProtocolException(message='Required field iVmeandelay is unset!')
    if self.iVworstdelay is None:
      raise TProtocol.TProtocolException(message='Required field iVworstdelay is unset!')
    if self.iVsize is None:
      raise TProtocol.TProtocolException(message='Required field iVsize is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfStth:
  """
  Attributes:
   - iVprocessors
   - iVconnections
   - iVidleconnections
   - iVmaxprocessors
   - iVmaxconnections
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVprocessors', None, None, ), # 1
    (2, TType.I32, 'iVconnections', None, None, ), # 2
    (3, TType.I32, 'iVidleconnections', None, None, ), # 3
    (4, TType.I32, 'iVmaxprocessors', None, None, ), # 4
    (5, TType.I32, 'iVmaxconnections', None, None, ), # 5
  )

  def __init__(self, iVprocessors=None, iVconnections=None, iVidleconnections=None, iVmaxprocessors=None, iVmaxconnections=None,):
    self.iVprocessors = iVprocessors
    self.iVconnections = iVconnections
    self.iVidleconnections = iVidleconnections
    self.iVmaxprocessors = iVmaxprocessors
    self.iVmaxconnections = iVmaxconnections

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVprocessors = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iVconnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.iVidleconnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iVmaxprocessors = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.iVmaxconnections = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfStth')
    if self.iVprocessors is not None:
      oprot.writeFieldBegin('iVprocessors', TType.I32, 1)
      oprot.writeI32(self.iVprocessors)
      oprot.writeFieldEnd()
    if self.iVconnections is not None:
      oprot.writeFieldBegin('iVconnections', TType.I32, 2)
      oprot.writeI32(self.iVconnections)
      oprot.writeFieldEnd()
    if self.iVidleconnections is not None:
      oprot.writeFieldBegin('iVidleconnections', TType.I32, 3)
      oprot.writeI32(self.iVidleconnections)
      oprot.writeFieldEnd()
    if self.iVmaxprocessors is not None:
      oprot.writeFieldBegin('iVmaxprocessors', TType.I32, 4)
      oprot.writeI32(self.iVmaxprocessors)
      oprot.writeFieldEnd()
    if self.iVmaxconnections is not None:
      oprot.writeFieldBegin('iVmaxconnections', TType.I32, 5)
      oprot.writeI32(self.iVmaxconnections)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVprocessors is None:
      raise TProtocol.TProtocolException(message='Required field iVprocessors is unset!')
    if self.iVconnections is None:
      raise TProtocol.TProtocolException(message='Required field iVconnections is unset!')
    if self.iVidleconnections is None:
      raise TProtocol.TProtocolException(message='Required field iVidleconnections is unset!')
    if self.iVmaxprocessors is None:
      raise TProtocol.TProtocolException(message='Required field iVmaxprocessors is unset!')
    if self.iVmaxconnections is None:
      raise TProtocol.TProtocolException(message='Required field iVmaxconnections is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfAenp:
  """
  Attributes:
   - sVopaquedata
   - sVnodeid
   - cVmutable
   - sVkeystart
   - iVlimitsize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVopaquedata', None, None, ), # 1
    (2, TType.STRING, 'sVnodeid', None, None, ), # 2
    (3, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 3
    (4, TType.STRING, 'sVkeystart', None, None, ), # 4
    (5, TType.I32, 'iVlimitsize', None, None, ), # 5
  )

  def __init__(self, sVopaquedata=None, sVnodeid=None, cVmutable=None, sVkeystart=None, iVlimitsize=None,):
    self.sVopaquedata = sVopaquedata
    self.sVnodeid = sVnodeid
    self.cVmutable = cVmutable
    self.sVkeystart = sVkeystart
    self.iVlimitsize = iVlimitsize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVopaquedata = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVnodeid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sVkeystart = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.iVlimitsize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfAenp')
    if self.sVopaquedata is not None:
      oprot.writeFieldBegin('sVopaquedata', TType.STRING, 1)
      oprot.writeString(self.sVopaquedata)
      oprot.writeFieldEnd()
    if self.sVnodeid is not None:
      oprot.writeFieldBegin('sVnodeid', TType.STRING, 2)
      oprot.writeString(self.sVnodeid)
      oprot.writeFieldEnd()
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 3)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.sVkeystart is not None:
      oprot.writeFieldBegin('sVkeystart', TType.STRING, 4)
      oprot.writeString(self.sVkeystart)
      oprot.writeFieldEnd()
    if self.iVlimitsize is not None:
      oprot.writeFieldBegin('iVlimitsize', TType.I32, 5)
      oprot.writeI32(self.iVlimitsize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVopaquedata is None:
      raise TProtocol.TProtocolException(message='Required field sVopaquedata is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfTope:
  """
  Attributes:
   - sVtablet
   - iVreadtime
   - iVwritetime
   - iVreadcountl2
   - iVwritecountl2
   - iVreadcountl1
   - iVwritecountl1
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sVtablet', None, None, ), # 1
    (2, TType.I64, 'iVreadtime', None, None, ), # 2
    (3, TType.I64, 'iVwritetime', None, None, ), # 3
    (4, TType.I64, 'iVreadcountl2', None, None, ), # 4
    (5, TType.I64, 'iVwritecountl2', None, None, ), # 5
    (6, TType.I64, 'iVreadcountl1', None, None, ), # 6
    (7, TType.I64, 'iVwritecountl1', None, None, ), # 7
  )

  def __init__(self, sVtablet=None, iVreadtime=None, iVwritetime=None, iVreadcountl2=None, iVwritecountl2=None, iVreadcountl1=None, iVwritecountl1=None,):
    self.sVtablet = sVtablet
    self.iVreadtime = iVreadtime
    self.iVwritetime = iVwritetime
    self.iVreadcountl2 = iVreadcountl2
    self.iVwritecountl2 = iVwritecountl2
    self.iVreadcountl1 = iVreadcountl1
    self.iVwritecountl1 = iVwritecountl1

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sVtablet = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.iVreadtime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.iVwritetime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.iVreadcountl2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.iVwritecountl2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.iVreadcountl1 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.iVwritecountl1 = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfTope')
    if self.sVtablet is not None:
      oprot.writeFieldBegin('sVtablet', TType.STRING, 1)
      oprot.writeString(self.sVtablet)
      oprot.writeFieldEnd()
    if self.iVreadtime is not None:
      oprot.writeFieldBegin('iVreadtime', TType.I64, 2)
      oprot.writeI64(self.iVreadtime)
      oprot.writeFieldEnd()
    if self.iVwritetime is not None:
      oprot.writeFieldBegin('iVwritetime', TType.I64, 3)
      oprot.writeI64(self.iVwritetime)
      oprot.writeFieldEnd()
    if self.iVreadcountl2 is not None:
      oprot.writeFieldBegin('iVreadcountl2', TType.I64, 4)
      oprot.writeI64(self.iVreadcountl2)
      oprot.writeFieldEnd()
    if self.iVwritecountl2 is not None:
      oprot.writeFieldBegin('iVwritecountl2', TType.I64, 5)
      oprot.writeI64(self.iVwritecountl2)
      oprot.writeFieldEnd()
    if self.iVreadcountl1 is not None:
      oprot.writeFieldBegin('iVreadcountl1', TType.I64, 6)
      oprot.writeI64(self.iVreadcountl1)
      oprot.writeFieldEnd()
    if self.iVwritecountl1 is not None:
      oprot.writeFieldBegin('iVwritecountl1', TType.I64, 7)
      oprot.writeI64(self.iVwritecountl1)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sVtablet is None:
      raise TProtocol.TProtocolException(message='Required field sVtablet is unset!')
    if self.iVreadtime is None:
      raise TProtocol.TProtocolException(message='Required field iVreadtime is unset!')
    if self.iVwritetime is None:
      raise TProtocol.TProtocolException(message='Required field iVwritetime is unset!')
    if self.iVreadcountl2 is None:
      raise TProtocol.TProtocolException(message='Required field iVreadcountl2 is unset!')
    if self.iVwritecountl2 is None:
      raise TProtocol.TProtocolException(message='Required field iVwritecountl2 is unset!')
    if self.iVreadcountl1 is None:
      raise TProtocol.TProtocolException(message='Required field iVreadcountl1 is unset!')
    if self.iVwritecountl1 is None:
      raise TProtocol.TProtocolException(message='Required field iVwritecountl1 is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfTop_:
  """
  Attributes:
   - iVtimestamp
   - cVtopelement
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'iVtimestamp', None, None, ), # 1
    (2, TType.LIST, 'cVtopelement', (TType.STRUCT,(ThrfTope, ThrfTope.thrift_spec)), None, ), # 2
  )

  def __init__(self, iVtimestamp=None, cVtopelement=None,):
    self.iVtimestamp = iVtimestamp
    self.cVtopelement = cVtopelement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.iVtimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVtopelement = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = ThrfTope()
            _elem124.read(iprot)
            self.cVtopelement.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfTop_')
    if self.iVtimestamp is not None:
      oprot.writeFieldBegin('iVtimestamp', TType.I64, 1)
      oprot.writeI64(self.iVtimestamp)
      oprot.writeFieldEnd()
    if self.cVtopelement is not None:
      oprot.writeFieldBegin('cVtopelement', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVtopelement))
      for iter125 in self.cVtopelement:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVtimestamp is None:
      raise TProtocol.TProtocolException(message='Required field iVtimestamp is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfComm:
  """
  Attributes:
   - iVcommand
   - iVsubcommand
   - sVreturnmessage
   - sVaddress
   - iVport
   - sVtablet
   - cVmutable
   - cVantientrophy
   - sVnodeid
   - sVnewtoken
   - cVmutabledestination
   - iVtimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVcommand', None, None, ), # 1
    (2, TType.I32, 'iVsubcommand', None, None, ), # 2
    (3, TType.STRING, 'sVreturnmessage', None, None, ), # 3
    (4, TType.STRING, 'sVaddress', None, None, ), # 4
    (5, TType.I32, 'iVport', None, None, ), # 5
    (6, TType.STRING, 'sVtablet', None, None, ), # 6
    (7, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'cVantientrophy', (ThrfAenp, ThrfAenp.thrift_spec), None, ), # 8
    (9, TType.STRING, 'sVnodeid', None, None, ), # 9
    (10, TType.STRING, 'sVnewtoken', None, "", ), # 10
    (11, TType.STRUCT, 'cVmutabledestination', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 11
    (12, TType.I64, 'iVtimestamp', None, None, ), # 12
  )

  def __init__(self, iVcommand=None, iVsubcommand=None, sVreturnmessage=None, sVaddress=None, iVport=None, sVtablet=None, cVmutable=None, cVantientrophy=None, sVnodeid=None, sVnewtoken=thrift_spec[10][4], cVmutabledestination=None, iVtimestamp=None,):
    self.iVcommand = iVcommand
    self.iVsubcommand = iVsubcommand
    self.sVreturnmessage = sVreturnmessage
    self.sVaddress = sVaddress
    self.iVport = iVport
    self.sVtablet = sVtablet
    self.cVmutable = cVmutable
    self.cVantientrophy = cVantientrophy
    self.sVnodeid = sVnodeid
    self.sVnewtoken = sVnewtoken
    self.cVmutabledestination = cVmutabledestination
    self.iVtimestamp = iVtimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVcommand = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iVsubcommand = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sVreturnmessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sVaddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.iVport = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sVtablet = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.cVantientrophy = ThrfAenp()
          self.cVantientrophy.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.sVnodeid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.sVnewtoken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.cVmutabledestination = ThrfLmtb()
          self.cVmutabledestination.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.iVtimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfComm')
    if self.iVcommand is not None:
      oprot.writeFieldBegin('iVcommand', TType.I32, 1)
      oprot.writeI32(self.iVcommand)
      oprot.writeFieldEnd()
    if self.iVsubcommand is not None:
      oprot.writeFieldBegin('iVsubcommand', TType.I32, 2)
      oprot.writeI32(self.iVsubcommand)
      oprot.writeFieldEnd()
    if self.sVreturnmessage is not None:
      oprot.writeFieldBegin('sVreturnmessage', TType.STRING, 3)
      oprot.writeString(self.sVreturnmessage)
      oprot.writeFieldEnd()
    if self.sVaddress is not None:
      oprot.writeFieldBegin('sVaddress', TType.STRING, 4)
      oprot.writeString(self.sVaddress)
      oprot.writeFieldEnd()
    if self.iVport is not None:
      oprot.writeFieldBegin('iVport', TType.I32, 5)
      oprot.writeI32(self.iVport)
      oprot.writeFieldEnd()
    if self.sVtablet is not None:
      oprot.writeFieldBegin('sVtablet', TType.STRING, 6)
      oprot.writeString(self.sVtablet)
      oprot.writeFieldEnd()
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 7)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.cVantientrophy is not None:
      oprot.writeFieldBegin('cVantientrophy', TType.STRUCT, 8)
      self.cVantientrophy.write(oprot)
      oprot.writeFieldEnd()
    if self.sVnodeid is not None:
      oprot.writeFieldBegin('sVnodeid', TType.STRING, 9)
      oprot.writeString(self.sVnodeid)
      oprot.writeFieldEnd()
    if self.sVnewtoken is not None:
      oprot.writeFieldBegin('sVnewtoken', TType.STRING, 10)
      oprot.writeString(self.sVnewtoken)
      oprot.writeFieldEnd()
    if self.cVmutabledestination is not None:
      oprot.writeFieldBegin('cVmutabledestination', TType.STRUCT, 11)
      self.cVmutabledestination.write(oprot)
      oprot.writeFieldEnd()
    if self.iVtimestamp is not None:
      oprot.writeFieldBegin('iVtimestamp', TType.I64, 12)
      oprot.writeI64(self.iVtimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfCort:
  """
  Attributes:
   - bVreturn
   - sVreturnmessage
   - cVreturntable
   - cVreturnstats
   - cVreturnthriftstats
   - cVreturnantientrophy
   - cVreturntop
   - iVreturn
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'bVreturn', None, None, ), # 1
    (2, TType.STRING, 'sVreturnmessage', None, None, ), # 2
    (3, TType.STRUCT, 'cVreturntable', (ThrfTabl, ThrfTabl.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'cVreturnstats', (ThrfStel, ThrfStel.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'cVreturnthriftstats', (ThrfStth, ThrfStth.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'cVreturnantientrophy', (ThrfAenp, ThrfAenp.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'cVreturntop', (ThrfTop_, ThrfTop_.thrift_spec), None, ), # 7
    (8, TType.I64, 'iVreturn', None, None, ), # 8
  )

  def __init__(self, bVreturn=None, sVreturnmessage=None, cVreturntable=None, cVreturnstats=None, cVreturnthriftstats=None, cVreturnantientrophy=None, cVreturntop=None, iVreturn=None,):
    self.bVreturn = bVreturn
    self.sVreturnmessage = sVreturnmessage
    self.cVreturntable = cVreturntable
    self.cVreturnstats = cVreturnstats
    self.cVreturnthriftstats = cVreturnthriftstats
    self.cVreturnantientrophy = cVreturnantientrophy
    self.cVreturntop = cVreturntop
    self.iVreturn = iVreturn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.bVreturn = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sVreturnmessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVreturntable = ThrfTabl()
          self.cVreturntable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.cVreturnstats = ThrfStel()
          self.cVreturnstats.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.cVreturnthriftstats = ThrfStth()
          self.cVreturnthriftstats.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.cVreturnantientrophy = ThrfAenp()
          self.cVreturnantientrophy.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.cVreturntop = ThrfTop_()
          self.cVreturntop.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.iVreturn = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfCort')
    if self.bVreturn is not None:
      oprot.writeFieldBegin('bVreturn', TType.BOOL, 1)
      oprot.writeBool(self.bVreturn)
      oprot.writeFieldEnd()
    if self.sVreturnmessage is not None:
      oprot.writeFieldBegin('sVreturnmessage', TType.STRING, 2)
      oprot.writeString(self.sVreturnmessage)
      oprot.writeFieldEnd()
    if self.cVreturntable is not None:
      oprot.writeFieldBegin('cVreturntable', TType.STRUCT, 3)
      self.cVreturntable.write(oprot)
      oprot.writeFieldEnd()
    if self.cVreturnstats is not None:
      oprot.writeFieldBegin('cVreturnstats', TType.STRUCT, 4)
      self.cVreturnstats.write(oprot)
      oprot.writeFieldEnd()
    if self.cVreturnthriftstats is not None:
      oprot.writeFieldBegin('cVreturnthriftstats', TType.STRUCT, 5)
      self.cVreturnthriftstats.write(oprot)
      oprot.writeFieldEnd()
    if self.cVreturnantientrophy is not None:
      oprot.writeFieldBegin('cVreturnantientrophy', TType.STRUCT, 6)
      self.cVreturnantientrophy.write(oprot)
      oprot.writeFieldEnd()
    if self.cVreturntop is not None:
      oprot.writeFieldBegin('cVreturntop', TType.STRUCT, 7)
      self.cVreturntop.write(oprot)
      oprot.writeFieldEnd()
    if self.iVreturn is not None:
      oprot.writeFieldBegin('iVreturn', TType.I64, 8)
      oprot.writeI64(self.iVreturn)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfLqry:
  """
  Attributes:
   - iVquery
   - cVmutable
   - cVkey
   - bVdigest
   - sVcallback
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVquery', None, None, ), # 1
    (2, TType.STRUCT, 'cVmutable', (ThrfLmtb, ThrfLmtb.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cVkey', (ThrfLkey, ThrfLkey.thrift_spec), None, ), # 3
    (4, TType.BOOL, 'bVdigest', None, False, ), # 4
    (5, TType.STRING, 'sVcallback', None, None, ), # 5
  )

  def __init__(self, iVquery=None, cVmutable=None, cVkey=None, bVdigest=thrift_spec[4][4], sVcallback=None,):
    self.iVquery = iVquery
    self.cVmutable = cVmutable
    self.cVkey = cVkey
    self.bVdigest = bVdigest
    self.sVcallback = sVcallback

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVquery = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cVmutable = ThrfLmtb()
          self.cVmutable.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVkey = ThrfLkey()
          self.cVkey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.bVdigest = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sVcallback = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfLqry')
    if self.iVquery is not None:
      oprot.writeFieldBegin('iVquery', TType.I32, 1)
      oprot.writeI32(self.iVquery)
      oprot.writeFieldEnd()
    if self.cVmutable is not None:
      oprot.writeFieldBegin('cVmutable', TType.STRUCT, 2)
      self.cVmutable.write(oprot)
      oprot.writeFieldEnd()
    if self.cVkey is not None:
      oprot.writeFieldBegin('cVkey', TType.STRUCT, 3)
      self.cVkey.write(oprot)
      oprot.writeFieldEnd()
    if self.bVdigest is not None:
      oprot.writeFieldBegin('bVdigest', TType.BOOL, 4)
      oprot.writeBool(self.bVdigest)
      oprot.writeFieldEnd()
    if self.sVcallback is not None:
      oprot.writeFieldBegin('sVcallback', TType.STRING, 5)
      oprot.writeString(self.sVcallback)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVquery is None:
      raise TProtocol.TProtocolException(message='Required field iVquery is unset!')
    if self.cVmutable is None:
      raise TProtocol.TProtocolException(message='Required field cVmutable is unset!')
    if self.cVkey is None:
      raise TProtocol.TProtocolException(message='Required field cVkey is unset!')
    if self.bVdigest is None:
      raise TProtocol.TProtocolException(message='Required field bVdigest is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfL2qb:
  """
  Attributes:
   - cKeyslices
   - bVreturn
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cKeyslices', (TType.STRUCT,(ThrfL2ks, ThrfL2ks.thrift_spec)), None, ), # 1
    (2, TType.BOOL, 'bVreturn', None, None, ), # 2
  )

  def __init__(self, cKeyslices=None, bVreturn=None,):
    self.cKeyslices = cKeyslices
    self.bVreturn = bVreturn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cKeyslices = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = ThrfL2ks()
            _elem131.read(iprot)
            self.cKeyslices.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.bVreturn = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfL2qb')
    if self.cKeyslices is not None:
      oprot.writeFieldBegin('cKeyslices', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cKeyslices))
      for iter132 in self.cKeyslices:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bVreturn is not None:
      oprot.writeFieldBegin('bVreturn', TType.BOOL, 2)
      oprot.writeBool(self.bVreturn)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfSrvc:
  """
  Attributes:
   - iVservicetype
   - cVquery
   - cVstatement
   - cVosql
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVservicetype', None, None, ), # 1
    (2, TType.STRUCT, 'cVquery', (ThrfL2qr, ThrfL2qr.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cVstatement', (ThrfL2st, ThrfL2st.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'cVosql', (ThrfL2os, ThrfL2os.thrift_spec), None, ), # 4
  )

  def __init__(self, iVservicetype=None, cVquery=None, cVstatement=None, cVosql=None,):
    self.iVservicetype = iVservicetype
    self.cVquery = cVquery
    self.cVstatement = cVstatement
    self.cVosql = cVosql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVservicetype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cVquery = ThrfL2qr()
          self.cVquery.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVstatement = ThrfL2st()
          self.cVstatement.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.cVosql = ThrfL2os()
          self.cVosql.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfSrvc')
    if self.iVservicetype is not None:
      oprot.writeFieldBegin('iVservicetype', TType.I32, 1)
      oprot.writeI32(self.iVservicetype)
      oprot.writeFieldEnd()
    if self.cVquery is not None:
      oprot.writeFieldBegin('cVquery', TType.STRUCT, 2)
      self.cVquery.write(oprot)
      oprot.writeFieldEnd()
    if self.cVstatement is not None:
      oprot.writeFieldBegin('cVstatement', TType.STRUCT, 3)
      self.cVstatement.write(oprot)
      oprot.writeFieldEnd()
    if self.cVosql is not None:
      oprot.writeFieldBegin('cVosql', TType.STRUCT, 4)
      self.cVosql.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVservicetype is None:
      raise TProtocol.TProtocolException(message='Required field iVservicetype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfSrvr:
  """
  Attributes:
   - bVreturn
   - cVdmlresult
   - cVqueryresult
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'bVreturn', None, None, ), # 1
    (2, TType.LIST, 'cVdmlresult', (TType.STRUCT,(ThrfL2ks, ThrfL2ks.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'cVqueryresult', (ThrfL2qb, ThrfL2qb.thrift_spec), None, ), # 3
  )

  def __init__(self, bVreturn=None, cVdmlresult=None, cVqueryresult=None,):
    self.bVreturn = bVreturn
    self.cVdmlresult = cVdmlresult
    self.cVqueryresult = cVqueryresult

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.bVreturn = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVdmlresult = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = ThrfL2ks()
            _elem138.read(iprot)
            self.cVdmlresult.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVqueryresult = ThrfL2qb()
          self.cVqueryresult.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfSrvr')
    if self.bVreturn is not None:
      oprot.writeFieldBegin('bVreturn', TType.BOOL, 1)
      oprot.writeBool(self.bVreturn)
      oprot.writeFieldEnd()
    if self.cVdmlresult is not None:
      oprot.writeFieldBegin('cVdmlresult', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVdmlresult))
      for iter139 in self.cVdmlresult:
        iter139.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVqueryresult is not None:
      oprot.writeFieldBegin('cVqueryresult', TType.STRUCT, 3)
      self.cVqueryresult.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfBsrc:
  """
  Attributes:
   - iVbulkservicetype
   - cVbulkthrift
   - cVbulkstring
   - cVsinglethrift
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iVbulkservicetype', None, None, ), # 1
    (2, TType.LIST, 'cVbulkthrift', (TType.STRUCT,(ThrfSrvc, ThrfSrvc.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'cVbulkstring', (TType.STRING,None), None, ), # 3
    (4, TType.STRUCT, 'cVsinglethrift', (ThrfSrvc, ThrfSrvc.thrift_spec), None, ), # 4
  )

  def __init__(self, iVbulkservicetype=None, cVbulkthrift=None, cVbulkstring=None, cVsinglethrift=None,):
    self.iVbulkservicetype = iVbulkservicetype
    self.cVbulkthrift = cVbulkthrift
    self.cVbulkstring = cVbulkstring
    self.cVsinglethrift = cVsinglethrift

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.iVbulkservicetype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVbulkthrift = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = ThrfSrvc()
            _elem145.read(iprot)
            self.cVbulkthrift.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cVbulkstring = []
          (_etype149, _size146) = iprot.readListBegin()
          for _i150 in xrange(_size146):
            _elem151 = iprot.readString();
            self.cVbulkstring.append(_elem151)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.cVsinglethrift = ThrfSrvc()
          self.cVsinglethrift.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfBsrc')
    if self.iVbulkservicetype is not None:
      oprot.writeFieldBegin('iVbulkservicetype', TType.I32, 1)
      oprot.writeI32(self.iVbulkservicetype)
      oprot.writeFieldEnd()
    if self.cVbulkthrift is not None:
      oprot.writeFieldBegin('cVbulkthrift', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cVbulkthrift))
      for iter152 in self.cVbulkthrift:
        iter152.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVbulkstring is not None:
      oprot.writeFieldBegin('cVbulkstring', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.cVbulkstring))
      for iter153 in self.cVbulkstring:
        oprot.writeString(iter153)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVsinglethrift is not None:
      oprot.writeFieldBegin('cVsinglethrift', TType.STRUCT, 4)
      self.cVsinglethrift.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.iVbulkservicetype is None:
      raise TProtocol.TProtocolException(message='Required field iVbulkservicetype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrfBsrr:
  """
  Attributes:
   - cVbulkthrift
   - cVbulkstring
   - cVsinglethrift
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cVbulkthrift', (TType.STRUCT,(ThrfSrvr, ThrfSrvr.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'cVbulkstring', (TType.STRING,None), None, ), # 2
    (3, TType.STRUCT, 'cVsinglethrift', (ThrfSrvr, ThrfSrvr.thrift_spec), None, ), # 3
  )

  def __init__(self, cVbulkthrift=None, cVbulkstring=None, cVsinglethrift=None,):
    self.cVbulkthrift = cVbulkthrift
    self.cVbulkstring = cVbulkstring
    self.cVsinglethrift = cVsinglethrift

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cVbulkthrift = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = ThrfSrvr()
            _elem159.read(iprot)
            self.cVbulkthrift.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cVbulkstring = []
          (_etype163, _size160) = iprot.readListBegin()
          for _i164 in xrange(_size160):
            _elem165 = iprot.readString();
            self.cVbulkstring.append(_elem165)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cVsinglethrift = ThrfSrvr()
          self.cVsinglethrift.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrfBsrr')
    if self.cVbulkthrift is not None:
      oprot.writeFieldBegin('cVbulkthrift', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.cVbulkthrift))
      for iter166 in self.cVbulkthrift:
        iter166.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVbulkstring is not None:
      oprot.writeFieldBegin('cVbulkstring', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.cVbulkstring))
      for iter167 in self.cVbulkstring:
        oprot.writeString(iter167)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cVsinglethrift is not None:
      oprot.writeFieldBegin('cVsinglethrift', TType.STRUCT, 3)
      self.cVsinglethrift.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
